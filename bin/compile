#!/usr/bin/env bash

set -o errexit
set -o pipefail

if [ -n "${BUILDPACK_DEBUG}" ]
then
    set -o xtrace
fi



readonly BUILD_DIR="${1}"
readonly CACHE_DIR="${2}"



function metabase::get_latest_github_version() {
  local rc=1

  local repo
  local api_url
  local version

  repo="metabase/metabase"
  api_url="https://api.github.com/repos/${repo}/releases/latest"

  if version="$( curl --silent --location --fail "${api_url}" | jq -r .tag_name )"; then
    echo "${version}"
    rc=0
  fi

  return "${rc}"
}

function metabase::get_from_cache() {
  local rc=1

  local version="${1}"
  local cache_dir="${2}"
  local variant="${3}"

  local cached_file
  local file_prefix="${version}"

  if [[ ! -z $variant ]]; then
    file_prefix="${variant}-${version}"
  fi

  cached_file="${cache_dir}/metabase-${file_prefix}.jar"

  if [ -f "${cached_file}" ]; then
    echo "${cached_file}"
    rc=0
  fi

  return "${rc}"
}

function metabase::download() {
  local rc=1

  local version="${1}"
  local cache_dir="${2}"
  local variant="${3}"

  local cached_file
  local url
  local path="${version}"
  local file_prefix="${version}"


  if [[ ! -z $variant ]]; then
    path="${variant}/${version}"
    file_prefix="${variant}-${version}"
  fi

  cached_file="${cache_dir}/metabase-${file_prefix}.jar"
  url="https://downloads.metabase.com/${path}/metabase.jar"

  if curl --silent --location --fail "${url}" --output "${cached_file}"; then
    rc=0
    echo "${cached_file}"
  fi

  return "${rc}"
}



metabase_version="${METABASE_VERSION:-"*"}"
metabase_dir="${BUILD_DIR}/target/uberjar"
metabase_variant="${METABASE_VARIANT}"

# If version is given as '*' or 'latest', try to retrieve the latest version number:
if [ "${metabase_version}" = "*" ] || [ "${metabase_version}" = "latest" ]; then
  if ! metabase_version="$( metabase::get_latest_github_version )"; then
    echo "Unable to retrieve Metabase latest version number." >&2
    echo "This is probably due to the GitHub API rate-limit." >&2
    echo "Please try to set 'METABASE_VERSION' to the desired version." >&2
    echo "Aborting." >&2
    exit 1
  fi
fi

# Try to get the jar file from cache (this step must not fail):
if jar_file="$( metabase::get_from_cache "${metabase_version}" "${CACHE_DIR}" "${metabase_variant}" )"; then
  echo "Successfully retrieved Metabase ${metabase_variant} ${metabase_version} from cache."
else
  # Try to download the file:
  echo "Downloading Metabase ${metabase_variant} ${metabase_version}"

  if ! jar_file="$( metabase::download "${metabase_version}" "${CACHE_DIR}" "${metabase_variant}" )"; then
    echo "Unable to download Metabase ${metabase_variant} ${metabase_version}." >&2
    echo "Aborting." >&2
    exit 1
  fi
fi

# We have the jar file, let's put it in the right place:
echo "Installing Metabase ${metabase_variant} ${metabase_version}"
mkdir -p "${metabase_dir}"
cp "${jar_file}" "${metabase_dir}/metabase.jar"

echo "Done"

exit 0
